// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PathTabs> should check snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PathTabs
    dispatch={[Function]}
    myPaths={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(Toolbar)>
          <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    style={
                              Object {
                                        "margin": 4,
                                      }
                    }
                    variant="raised"
          >
                    Add Path
          </WithStyles(Button)>
</WithStyles(Toolbar)>,
        <WithStyles(Tabs)
          fullWidth={true}
          indicatorColor="primary"
          onChange={[Function]}
          textColor="primary"
          value={0}
>
          <WithStyles(Tab)
                    label="Joined Paths"
          />
          <WithStyles(Tab)
                    label="My Paths"
          />
          <WithStyles(Tab)
                    label="Public Paths"
          />
</WithStyles(Tabs)>,
        <WithStyles(PathsTable)
          dispatch={[Function]}
          owner={false}
          paths={Object {}}
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            style={
                        Object {
                                    "margin": 4,
                                  }
            }
            variant="raised"
>
            Add Path
</WithStyles(Button)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Add Path",
            "color": "primary",
            "onClick": [Function],
            "style": Object {
              "margin": 4,
            },
            "variant": "raised",
          },
          "ref": null,
          "rendered": "Add Path",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Tab)
              label="Joined Paths"
/>,
            <WithStyles(Tab)
              label="My Paths"
/>,
            <WithStyles(Tab)
              label="Public Paths"
/>,
          ],
          "fullWidth": true,
          "indicatorColor": "primary",
          "onChange": [Function],
          "textColor": "primary",
          "value": 0,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "label": "Joined Paths",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "label": "My Paths",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "label": "Public Paths",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "dispatch": [Function],
          "owner": false,
          "paths": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(Toolbar)>
            <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                        style={
                                    Object {
                                                "margin": 4,
                                              }
                        }
                        variant="raised"
            >
                        Add Path
            </WithStyles(Button)>
</WithStyles(Toolbar)>,
          <WithStyles(Tabs)
            fullWidth={true}
            indicatorColor="primary"
            onChange={[Function]}
            textColor="primary"
            value={0}
>
            <WithStyles(Tab)
                        label="Joined Paths"
            />
            <WithStyles(Tab)
                        label="My Paths"
            />
            <WithStyles(Tab)
                        label="Public Paths"
            />
</WithStyles(Tabs)>,
          <WithStyles(PathsTable)
            dispatch={[Function]}
            owner={false}
            paths={Object {}}
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              style={
                            Object {
                                          "margin": 4,
                                        }
              }
              variant="raised"
>
              Add Path
</WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Add Path",
              "color": "primary",
              "onClick": [Function],
              "style": Object {
                "margin": 4,
              },
              "variant": "raised",
            },
            "ref": null,
            "rendered": "Add Path",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Tab)
                label="Joined Paths"
/>,
              <WithStyles(Tab)
                label="My Paths"
/>,
              <WithStyles(Tab)
                label="Public Paths"
/>,
            ],
            "fullWidth": true,
            "indicatorColor": "primary",
            "onChange": [Function],
            "textColor": "primary",
            "value": 0,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "label": "Joined Paths",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "label": "My Paths",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "label": "Public Paths",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "dispatch": [Function],
            "owner": false,
            "paths": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {},
  },
}
`;
